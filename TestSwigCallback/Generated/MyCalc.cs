//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MyCalc : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MyCalc(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MyCalc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MyCalc() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MathCppPINVOKE.delete_MyCalc(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MyCalc() : this(MathCppPINVOKE.new_MyCalc(), true) {
    SwigDirectorConnect();
  }

  public void DoMath() {
    MathCppPINVOKE.MyCalc_DoMath(swigCPtr);
  }

  public virtual int add(int arg0, int arg1) {
    int ret = (SwigDerivedClassHasMethod("add", swigMethodTypes0) ? MathCppPINVOKE.MyCalc_addSwigExplicitMyCalc(swigCPtr, arg0, arg1) : MathCppPINVOKE.MyCalc_add(swigCPtr, arg0, arg1));
    return ret;
  }

  public virtual int Mul(int arg0, int arg1) {
    int ret = (SwigDerivedClassHasMethod("Mul", swigMethodTypes1) ? MathCppPINVOKE.MyCalc_MulSwigExplicitMyCalc(swigCPtr, arg0, arg1) : MathCppPINVOKE.MyCalc_Mul(swigCPtr, arg0, arg1));
    return ret;
  }

  public virtual void Print(string v) {
    if (SwigDerivedClassHasMethod("Print", swigMethodTypes2)) MathCppPINVOKE.MyCalc_PrintSwigExplicitMyCalc(swigCPtr, v); else MathCppPINVOKE.MyCalc_Print(swigCPtr, v);
    if (MathCppPINVOKE.SWIGPendingException.Pending) throw MathCppPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("add", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMyCalc_0(SwigDirectorMethodadd);
    if (SwigDerivedClassHasMethod("Mul", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateMyCalc_1(SwigDirectorMethodMul);
    if (SwigDerivedClassHasMethod("Print", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateMyCalc_2(SwigDirectorMethodPrint);
    MathCppPINVOKE.MyCalc_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MyCalc));
    return hasDerivedMethod;
  }

  private int SwigDirectorMethodadd(int arg0, int arg1) {
    return add(arg0, arg1);
  }

  private int SwigDirectorMethodMul(int arg0, int arg1) {
    return Mul(arg0, arg1);
  }

  private void SwigDirectorMethodPrint(string v) {
    Print(v);
  }

  public delegate int SwigDelegateMyCalc_0(int arg0, int arg1);
  public delegate int SwigDelegateMyCalc_1(int arg0, int arg1);
  public delegate void SwigDelegateMyCalc_2(string v);

  private SwigDelegateMyCalc_0 swigDelegate0;
  private SwigDelegateMyCalc_1 swigDelegate1;
  private SwigDelegateMyCalc_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(string) };
}
